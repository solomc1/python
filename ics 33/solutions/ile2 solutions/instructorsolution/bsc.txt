# Setup
c-->from imp import reload
c-->import poly
c-->reload(poly)
c-->from poly import Poly
# Test init
e-->Poly( (3,2) )-->3x^2
e-->Poly( (3,2), (-2,1), (4,0) )-->3x^2 - 2x + 4
e-->Poly( (1,5), (-2,4), (3,3), (-4,2), (5,1), (-6,0) )-->x^5 - 2x^4 + 3x^3 - 4x^2 + 5x - 6
e-->Poly( (3.,2), (-2,1), (4.,0) )-->3.0x^2 - 2x + 4.0
e-->Poly()-->0
e-->Poly( (3,2), (0,1), (4,0) ) # ignore 0 coefficient-->3x^2 + 4
^-->Poly( ('a',2) )                 # coefficent not numeric-->AssertionError
^-->Poly( (3,'a') )                 # power not numeric-->AssertionError
^-->Poly( (3,1.)  )                 # power not int-->AssertionError
^-->Poly( (3,-2)  )                 # power negative-->AssertionError
^-->Poly( (3, 2), (-2, 1), (1, 2) ) # power repeated-->AssertionError
e-->Poly( (0, 2), (-2, 1), (0, 2) ) # OK to repeat power if coefficient is zero-->-2x
# Test repr
c-->p = Poly( (3,2), (-2,1), (4,0) )
c-->print('        Showing repr (checked in line 22):',repr(p))
==-->p.terms-->eval(repr(p)).terms
c-->p = Poly( (1,5), (-2,4), (3,3), (-4,2), (5,1), (-6,0 ) )
c-->print('        Showing repr (checked in line 25):',repr(p))
==-->p.terms-->eval(repr(p)).terms
e-->repr( Poly() )-->Poly()
# Test len
e-->len( Poly( (3,2), (-2,1), (4,0) ) )-->2
e-->len( Poly( (1,5), (-2,4), (3,3), (-4,2), (5,1), (-6,0) ) )-->5
e-->len( Poly( (1,5) ))-->5
e-->len( Poly() )-->0
# Test __call__
e-->Poly( (3,2), (-2,1), (4,0) )(2)-->12
e-->Poly( (3,2), (-2,1), (4,0) )(-2)-->20
e-->Poly()(1)-->0
# Test __iter__
e-->[t for t in Poly( (3,2), (-2,1), (4,0) )]-->[(3, 2), (-2, 1), (4, 0)]
e-->[t for t in Poly( (1,5), (-2,4), (3,3), (-4,2), (5,1), (-6,0) )]-->[(1, 5), (-2, 4), (3, 3), (-4, 2), (5, 1), (-6, 0)]
e-->[t for t in Poly()]-->[]
# Test __getitem__
c-->p = Poly( (3,2), (-2,1), (4,0) )
e-->[p[i] for i in range(len(p)+1)]-->[4, -2, 3]
c-->p = Poly( (3,4), (-2,1) )
e-->[p[i] for i in range(len(p)+1)]-->[0, -2, 0, 0, 3]
^-->p['a']-->TypeError
^-->p[-2]-->TypeError
# Test __setitem__
c-->p = Poly( (3,2), (-2,1), (4,0) )
c-->p[5] = -2
e-->p-->-2x^5 + 3x^2 - 2x + 4
c-->p[2] = 5
e-->p-->-2x^5 + 5x^2 - 2x + 4
c-->p[2] = 0
e-->p-->-2x^5 - 2x + 4
c-->p[10] = 0
e-->p-->-2x^5 - 2x + 4
^-->p[-2] = 4-->TypeError
^-->p['a'] = 1-->TypeError
# Test __delitem__
c-->p = Poly( (3,2), (-2,1), (4,0) )
c-->del p[1]
e-->p-->3x^2 + 4
c-->del p[4]
e-->p-->3x^2 + 4
c-->del p[0]
e-->p-->3x^2
c-->del p[2]
e-->p-->0
^-->del p[-2]-->TypeError
^-->del p['a']-->TypeError
# Test helper method _add_item_
c-->p = Poly()
c-->p._add_term(-2,1)
e-->p-->-2x
c-->p._add_term(3,2)
e-->p-->3x^2 - 2x
c-->p._add_term(4,0)
e-->p-->3x^2 - 2x + 4
c-->p._add_term(3,2)
e-->p-->6x^2 - 2x + 4
c-->p._add_term(2,1)
e-->p-->6x^2 + 4
c-->p._add_term(0,3)
e-->p-->6x^2 + 4
# Test +
c-->p1 = Poly((1,1),(2,0))
c-->p2 = Poly((3,2),(2,1),(1,0))
c-->p3 = Poly((3,5),(-2,2),(-4,0))
e-->p1+p2-->3x^2 + 3x + 3
e-->p2+p3-->3x^5 + x^2 + 2x - 3
e-->p1+p3-->3x^5 - 2x^2 + x - 2
e-->2+p3-->3x^5 - 2x^2 - 2
e-->p3+2-->3x^5 - 2x^2 - 2
# Test *
c-->p1 = Poly((1,1),(2,0))
c-->p2 = Poly((3,2),(2,1),(1,0))
c-->p3 = Poly((3,5),(-2,2),(-4,0))
e-->p1*p1-->x^2 + 4x + 4
e-->p1*p2-->3x^3 + 8x^2 + 5x + 2
e-->p2*p2-->9x^4 + 12x^3 + 10x^2 + 4x + 1
e-->p2*p3-->9x^7 + 6x^6 + 3x^5 - 6x^4 - 4x^3 - 14x^2 - 8x - 4
e-->p3*p3-->9x^10 - 12x^7 - 24x^5 + 4x^4 + 16x^2 + 16
e-->2*p3-->6x^5 - 4x^2 - 8
e-->p3*2-->6x^5 - 4x^2 - 8
e-->p1*Poly()-->0
# Test ==
c-->p0 = Poly((5,0))
c-->p1 = Poly((1,1),(2,0))
c-->p2 = Poly((3,2),(2,1),(1,0))
c-->p3 = Poly((3,5),(-2,2),(-4,0))
==-->[a==b for a in (p0,p1,p2,p3) for b in (p0,p1,p2,p3)]-->[a is b for a in (p0,p1,p2,p3) for b in (p0,p1,p2,p3)]
e-->p0==5-->True
e-->5==p0-->True
e-->p1==5-->False
e-->5==p1-->False
^-->'a'==p0-->TypeError
^-->p0=='a'-->TypeError